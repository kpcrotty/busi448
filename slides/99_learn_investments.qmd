---
title: 'Rice Business Learn Investments Dashboard'
author: "<br>Kerry Back & Kevin Crotty<br>"
format: 
    revealjs:
        incremental: true
        logo: RiceLogo.png
        footer: "Learn Investments"
        self-contained: true
        code-fold: true
        theme: [default, custom.scss]
        show-slide-number: print
        menu: 
            width: wide
            numbers: true             
execute:
    echo: false
    freeze: auto
jupyter: python3
---
## The Learn Investments Dashboard

- Interactive figures and tables illustrating investment concepts

. . .

::: {.nonincremental}
- Over 80 pages covering:

:::: {.columns}
::: {.column width="50%"}
1. Time Value of Money
2. Risk and Return
3. Portfolios
4. Capital Asset Pricing Model
:::
::: {.column width="50%"}
5. Sorts and Factors
6. Funds and Taxes
7. Futures and Options
8. Fixed Income
:::
::::
:::

## Some examples from each section

::: {.nonincremental}
- [Mortgage Amortization](https://learn-investments.rice-business.org/borrowing-saving/amortization-schedule)
- [Time-varying Volatilities](https://learn-investments.rice-business.org/risk/volatilities)
- [Optimal Capital Allocation](https://learn-investments.rice-business.org/portfolios/optimal)
- [Security Market Line for Industry Returns](https://learn-investments.rice-business.org/capm/sml-industries)
- [Sorts on Characteristics](https://learn-investments.rice-business.org/factor-investing/quintiles)
- [Evaluation of Mutual Funds](https://learn-investments.rice-business.org/capm/sml-industries)
- [Monte Carlo Option Valuation](https://learn-investments.rice-business.org/futures-options/monte-carlo)
- [Duration and Risk](https://learn-investments.rice-business.org/fixed-income/duration-risk)
:::

## Teaching Benefit #1: Interactive figures {.nonincremental}

::: {.nonincremental}
- Interactive figures facilitate economic discussion
- Sliders allow figure to change in real time
- Hover data provides additional information to the pictures
- Plotly legend allows isolation of part of the figure
:::

## Teaching Benefit #2: More data in the classroom {.nonincremental}

::: {.nonincremental}
- The site facilitates real-time and historical data without requiring students to pull and organize it themselves
- Visualization: seeing is believing
- Helps engage students in the classroom discussion
- About 1/3 of the pages utilize data
:::

## Teaching Benefit #3: Introducing Python {.nonincremental}

::: {.nonincremental}
- Underlying Python code available in linked Google Colab notebooks
- Totally optional feature
- Useful if professor (or student!) wants to alter the set-up
:::

# Example \#1: Optimal Portfolios

## Optimal portfolio teaching discussions

::: {.nonincremental}
- Optimal combination of risky assets without/with a risk-free asset?
- What is the effect of correlation on the above?
- What is the effect of input uncertainty on the above?
- How should a particular individual invest?
:::

[Optimal Capital Allocation](https://learn-investments.rice-business.org/portfolios/optimal)


## Optimal Portfolios: Correlation

```{python}
import numpy as np 
import plotly.graph_objects as go 

# means
mn1 = 0.08
mn2 = 0.12
mn3 = 0.15

# std devs
sd1 = 0.15
sd2 = 0.25
sd3 = 0.35

# correlations
c12 = 0.15
c13 = 0.60
c23 = 0.30

# risk-free rate
rf = 0.02

# risk aversion
raver = 6

fig = go.Figure()

PARM_LIST = [0, 0.1, 0.2, 0.3, 0.4, 0.5]
for parm in PARM_LIST:

    ##### Create arrays
    mn = np.array([mn1, mn2, mn3])
    sd = np.array([sd1, sd2, sd3])

    corr = np.identity(3)
    corr[0, 1] = corr[1, 0] = parm #c12
    corr[0, 2] = corr[2, 0] = c13
    corr[1, 2] = corr[2, 1] = c23

    cov = np.diag(sd) @ corr @ np.diag(sd)


    ##### Calculate frontier
    # global minimum variance portfolio
    w = np.linalg.solve(cov, np.ones(3))
    gmv = w / np.sum(w)
    gmv_mn = gmv @ mn
    gmv_sd = np.sqrt(gmv @ cov @ gmv)

    # second frontier portfolio
    w = np.linalg.solve(cov, mn)
    second_port = w / np.sum(w)
    second_mn = second_port @ mn 
    second_sd = np.sqrt(second_port @ cov @ second_port)

    # means to display
    min_mn = 0
    max_mn = 1.2*np.max(mn)
    mns = np.linspace(min_mn, max_mn, 101)

    # portfolio weights and risks
    gmv_wt = (mns - second_mn) / (gmv_mn - second_mn)
    second_wt = 1 - gmv_wt
    ports = (
        gmv_wt.reshape(-1, 1) * gmv.reshape(1, -1) + 
        second_wt.reshape(-1, 1) * second_port.reshape(1, -1)
    )
    vr = np.diag(ports @ cov @ ports.T)
    sds = np.sqrt(vr)


    ##### Calculate opt port
    optimum = np.linalg.solve(raver*cov, mn-rf)
    optimum_mn = rf + optimum @ (mn-rf)
    optimum_sd = np.sqrt(optimum @ cov @ optimum)


    ##### Calculate tangency
    tang = np.linalg.solve(cov, mn-rf)
    tang = tang / np.sum(tang)
    tang_mn = tang @ mn
    tang_sd = np.sqrt(tang @ cov @ tang)

    ##### Figure
    

    # frontier with only risky assets
    string = 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr1 = go.Scatter(
        x=sds,
        y=mns,
        mode="lines",
        customdata=ports,
        hovertemplate=string,
        name = "frontier with only risky assets",
        visible=False
    )

    # three risky assets
    tr2 = go.Scatter( 
        x=sd,
        y=mn,
        text=["Asset 1", "Asset 2", "Asset 3"],
        hovertemplate="%{text}<extra></extra>",
        mode="markers",
        marker=dict(size=15),
        showlegend=False,
        visible=False
    )

    # tangency portfolio
    string = "tangency portfolio<br>"
    string += 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr3 = go.Scatter(
        x=[tang_sd],
        y=[tang_mn],
        customdata=tang.reshape(1, -1),
        hovertemplate=string,
        mode="markers",
        marker=dict(size=15),
        showlegend=False,
        visible=False
    )

    # optimal portfolio
    string = "optimal portfolio<br>"
    string += 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr4 = go.Scatter(
        x=[optimum_sd],
        y=[optimum_mn],
        mode="markers",
        marker=dict(size=18, symbol="star"),
        customdata = optimum.reshape(1, -1),
        hovertemplate=string,
        showlegend=False,
        visible=False
    )

    # efficient frontier with risk-free asset
    ports = np.arange(0, 2.01, 0.01).reshape(-1, 1) * tang.reshape(1, -1)
    x = np.sqrt(np.diag(ports @ cov @ ports.T))
    y = rf + ports @ (mn-rf)
    string = 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr5 = go.Scatter(
        x=x,
        y=y,
        mode="lines",
        customdata=ports,
        hovertemplate=string,
        name="frontier including risk-free asset",
        visible=False
    )

    # indifference curve
    utility = optimum_mn - 0.5 * raver * optimum_sd**2
    risks = np.linspace(0, 2*optimum_sd, 50)
    means = utility + 0.5 * raver * risks**2
    tr6 = go.Scatter(
        x=risks,
        y=means,
        mode="lines",
        line=dict(dash="dot"),
        name="indifference curve",
        visible=False
    )


    # for trace in (tr1, tr2, tr3, tr4, tr5, tr6):
    for trace in (tr1, tr2, tr3, tr5):
        fig.add_trace(trace)

# Make first 6 traces visible
NUM_TRACES = 4
for i in np.arange(NUM_TRACES):
    fig.data[i].visible=True


# Create and add slider
steps = []
for i in range(len(PARM_LIST)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)} ],
        label=str(PARM_LIST[i])
    )
    for k in range(NUM_TRACES):
        step["args"][0]["visible"][NUM_TRACES*i+k] = True  # Toggle i'th trace to "visible"
    steps.append(step)

sliders = [dict(
    active=0,
    currentvalue={"prefix": "Corr(Asset 1, Asset 2): "},
    # pad={"t": len(RAVER_LIST)},
    steps=steps
)]

fig.update_layout(
    sliders=sliders
)


fig.update_layout(
    xaxis_title="Standard Deviation",
    yaxis_title="Expected Return",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    template="plotly_white",
    legend=dict(
        xanchor="left",
        yanchor="top",
        y=0.99,
        x=0.01,
    )
) 

# Set the x-axis and y-axis ranges
fig.update_xaxes(range=[0, 0.4])  # Specify the min and max values for the x-axis
fig.update_yaxes(range=[0, 0.2])  # Specify the min and max values for the y-axis


fig.show()


```


## Optimal Portfolios: Input Uncertainty

```{python}
import numpy as np 
import plotly.graph_objects as go 

# means
# mn1 = 0.08
mn2 = 0.12
mn3 = 0.15

# std devs
sd1 = 0.15
sd2 = 0.25
sd3 = 0.35

# correlations
c12 = 0.15
c13 = 0.60
c23 = 0.30

# risk-free rate
rf = 0.02

# risk aversion
raver = 6

fig = go.Figure()

PARM_LIST = [0.06, 0.08, 0.10, 0.12]
for parm in PARM_LIST:

    ##### Create arrays
    mn = np.array([parm, mn2, mn3])
    sd = np.array([sd1, sd2, sd3])

    corr = np.identity(3)
    corr[0, 1] = corr[1, 0] = c12
    corr[0, 2] = corr[2, 0] = c13
    corr[1, 2] = corr[2, 1] = c23

    cov = np.diag(sd) @ corr @ np.diag(sd)


    ##### Calculate frontier
    # global minimum variance portfolio
    w = np.linalg.solve(cov, np.ones(3))
    gmv = w / np.sum(w)
    gmv_mn = gmv @ mn
    gmv_sd = np.sqrt(gmv @ cov @ gmv)

    # second frontier portfolio
    w = np.linalg.solve(cov, mn)
    second_port = w / np.sum(w)
    second_mn = second_port @ mn 
    second_sd = np.sqrt(second_port @ cov @ second_port)

    # means to display
    min_mn = 0
    max_mn = 1.2*np.max(mn)
    mns = np.linspace(min_mn, max_mn, 101)

    # portfolio weights and risks
    gmv_wt = (mns - second_mn) / (gmv_mn - second_mn)
    second_wt = 1 - gmv_wt
    ports = (
        gmv_wt.reshape(-1, 1) * gmv.reshape(1, -1) + 
        second_wt.reshape(-1, 1) * second_port.reshape(1, -1)
    )
    vr = np.diag(ports @ cov @ ports.T)
    sds = np.sqrt(vr)


    ##### Calculate opt port
    optimum = np.linalg.solve(raver*cov, mn-rf)
    optimum_mn = rf + optimum @ (mn-rf)
    optimum_sd = np.sqrt(optimum @ cov @ optimum)


    ##### Calculate tangency
    tang = np.linalg.solve(cov, mn-rf)
    tang = tang / np.sum(tang)
    tang_mn = tang @ mn
    tang_sd = np.sqrt(tang @ cov @ tang)

    ##### Figure
    

    # frontier with only risky assets
    string = 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr1 = go.Scatter(
        x=sds,
        y=mns,
        mode="lines",
        customdata=ports,
        hovertemplate=string,
        name = "frontier with only risky assets",
        visible=False
    )

    # three risky assets
    tr2 = go.Scatter( 
        x=sd,
        y=mn,
        text=["Asset 1", "Asset 2", "Asset 3"],
        hovertemplate="%{text}<extra></extra>",
        mode="markers",
        marker=dict(size=15),
        showlegend=False,
        visible=False
    )

    # tangency portfolio
    string = "tangency portfolio<br>"
    string += 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr3 = go.Scatter(
        x=[tang_sd],
        y=[tang_mn],
        customdata=tang.reshape(1, -1),
        hovertemplate=string,
        mode="markers",
        marker=dict(size=15),
        showlegend=False,
        visible=False
    )

    # optimal portfolio
    string = "optimal portfolio<br>"
    string += 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr4 = go.Scatter(
        x=[optimum_sd],
        y=[optimum_mn],
        mode="markers",
        marker=dict(size=18, symbol="star"),
        customdata = optimum.reshape(1, -1),
        hovertemplate=string,
        showlegend=False,
        visible=False
    )

    # efficient frontier with risk-free asset
    ports = np.arange(0, 2.01, 0.01).reshape(-1, 1) * tang.reshape(1, -1)
    x = np.sqrt(np.diag(ports @ cov @ ports.T))
    y = rf + ports @ (mn-rf)
    string = 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr5 = go.Scatter(
        x=x,
        y=y,
        mode="lines",
        customdata=ports,
        hovertemplate=string,
        name="frontier including risk-free asset",
        visible=False
    )

    # indifference curve
    utility = optimum_mn - 0.5 * raver * optimum_sd**2
    risks = np.linspace(0, 2*optimum_sd, 50)
    means = utility + 0.5 * raver * risks**2
    tr6 = go.Scatter(
        x=risks,
        y=means,
        mode="lines",
        line=dict(dash="dot"),
        name="indifference curve",
        visible=False
    )


    # for trace in (tr1, tr2, tr3, tr4, tr5, tr6):
    for trace in (tr1, tr2, tr3, tr5):
        fig.add_trace(trace)

# Make first 6 traces visible
NUM_TRACES = 4
for i in np.arange(NUM_TRACES):
    fig.data[i].visible=True


# Create and add slider
steps = []
for i in range(len(PARM_LIST)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)} ],
        label=str(PARM_LIST[i])
    )
    for k in range(NUM_TRACES):
        step["args"][0]["visible"][NUM_TRACES*i+k] = True  # Toggle i'th trace to "visible"
    steps.append(step)

sliders = [dict(
    active=0,
    currentvalue={"prefix": "Asset 1 E[r]: "},
    # pad={"t": len(RAVER_LIST)},
    steps=steps
)]

fig.update_layout(
    sliders=sliders
)


fig.update_layout(
    xaxis_title="Standard Deviation",
    yaxis_title="Expected Return",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    template="plotly_white",
    legend=dict(
        xanchor="left",
        yanchor="top",
        y=0.99,
        x=0.01,
    )
) 

# Set the x-axis and y-axis ranges
fig.update_xaxes(range=[0, 0.4])  # Specify the min and max values for the x-axis
fig.update_yaxes(range=[0, 0.2])  # Specify the min and max values for the y-axis


fig.show()


```


## Optimal Portfolios: Risk Aversion

```{python}
import numpy as np 
import plotly.graph_objects as go 

# means
mn1 = 0.08
mn2 = 0.12
mn3 = 0.15

# std devs
sd1 = 0.15
sd2 = 0.25
sd3 = 0.35

# correlations
c12 = 0.15
c13 = 0.60
c23 = 0.30

# risk-free rate
rf = 0.02

# risk aversion
raver = 6
fig = go.Figure()

RAVER_LIST = [2,3,4,5,6,7,8,9,10]
for raver in RAVER_LIST:
    ##### Create arrays
    mn = np.array([mn1, mn2, mn3])
    sd = np.array([sd1, sd2, sd3])

    corr = np.identity(3)
    corr[0, 1] = corr[1, 0] = c12
    corr[0, 2] = corr[2, 0] = c13
    corr[1, 2] = corr[2, 1] = c23

    cov = np.diag(sd) @ corr @ np.diag(sd)


    ##### Calculate frontier
    # global minimum variance portfolio
    w = np.linalg.solve(cov, np.ones(3))
    gmv = w / np.sum(w)
    gmv_mn = gmv @ mn
    gmv_sd = np.sqrt(gmv @ cov @ gmv)

    # second frontier portfolio
    w = np.linalg.solve(cov, mn)
    second_port = w / np.sum(w)
    second_mn = second_port @ mn 
    second_sd = np.sqrt(second_port @ cov @ second_port)

    # means to display
    min_mn = 0
    max_mn = 1.2*np.max(mn)
    mns = np.linspace(min_mn, max_mn, 101)

    # portfolio weights and risks
    gmv_wt = (mns - second_mn) / (gmv_mn - second_mn)
    second_wt = 1 - gmv_wt
    ports = (
        gmv_wt.reshape(-1, 1) * gmv.reshape(1, -1) + 
        second_wt.reshape(-1, 1) * second_port.reshape(1, -1)
    )
    vr = np.diag(ports @ cov @ ports.T)
    sds = np.sqrt(vr)


    ##### Calculate opt port
    optimum = np.linalg.solve(raver*cov, mn-rf)
    optimum_mn = rf + optimum @ (mn-rf)
    optimum_sd = np.sqrt(optimum @ cov @ optimum)


    ##### Calculate tangency
    tang = np.linalg.solve(cov, mn-rf)
    tang = tang / np.sum(tang)
    tang_mn = tang @ mn
    tang_sd = np.sqrt(tang @ cov @ tang)

    ##### Figure
    

    # frontier with only risky assets
    string = 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr1 = go.Scatter(
        x=sds,
        y=mns,
        mode="lines",
        customdata=ports,
        hovertemplate=string,
        name = "frontier with only risky assets",
        visible=False
    )

    # three risky assets
    tr2 = go.Scatter( 
        x=sd,
        y=mn,
        text=["Asset 1", "Asset 2", "Asset 3"],
        hovertemplate="%{text}<extra></extra>",
        mode="markers",
        marker=dict(size=15),
        showlegend=False,
        visible=False
    )

    # tangency portfolio
    string = "tangency portfolio<br>"
    string += 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr3 = go.Scatter(
        x=[tang_sd],
        y=[tang_mn],
        customdata=tang.reshape(1, -1),
        hovertemplate=string,
        mode="markers",
        marker=dict(size=15),
        showlegend=False,
        visible=False
    )

    # optimal portfolio
    string = "optimal portfolio<br>"
    string += 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr4 = go.Scatter(
        x=[optimum_sd],
        y=[optimum_mn],
        mode="markers",
        marker=dict(size=18, symbol="star"),
        customdata = optimum.reshape(1, -1),
        hovertemplate=string,
        showlegend=False,
        visible=False
    )

    # efficient frontier with risk-free asset
    ports = np.arange(0, 2.01, 0.01).reshape(-1, 1) * tang.reshape(1, -1)
    x = np.sqrt(np.diag(ports @ cov @ ports.T))
    y = rf + ports @ (mn-rf)
    string = 'asset 1: %{customdata[0]:.0%}<br>'
    string += 'asset 2: %{customdata[1]:.0%}<br>'
    string += 'asset 3: %{customdata[2]:.0%}<br>'
    string += '<extra></extra>'
    tr5 = go.Scatter(
        x=x,
        y=y,
        mode="lines",
        customdata=ports,
        hovertemplate=string,
        name="frontier including risk-free asset",
        visible=False
    )

    # indifference curve
    utility = optimum_mn - 0.5 * raver * optimum_sd**2
    risks = np.linspace(0, 2*optimum_sd, 50)
    means = utility + 0.5 * raver * risks**2
    tr6 = go.Scatter(
        x=risks,
        y=means,
        mode="lines",
        line=dict(dash="dot"),
        name="indifference curve",
        visible=False
    )


    for trace in (tr1, tr2, tr3, tr4, tr5, tr6):
        fig.add_trace(trace)

# Make first 6 traces visible
for i in np.arange(6):
    fig.data[i].visible=True


# Create and add slider
steps = []
for i in range(len(RAVER_LIST)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)} ],
        label=str(RAVER_LIST[i])
    )
    for k in range(6):
        step["args"][0]["visible"][6*i+k] = True  # Toggle i'th trace to "visible"
    steps.append(step)

sliders = [dict(
    active=0,
    currentvalue={"prefix": "Risk Aversion: "},
    # pad={"t": len(RAVER_LIST)},
    steps=steps
)]

fig.update_layout(
    sliders=sliders
)


fig.update_layout(
    xaxis_title="Standard Deviation",
    yaxis_title="Expected Return",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    template="plotly_white",
    legend=dict(
        xanchor="left",
        yanchor="top",
        y=0.99,
        x=0.01,
    )
) 

# Set the x-axis and y-axis ranges
fig.update_xaxes(range=[0, 0.4])  # Specify the min and max values for the x-axis
fig.update_yaxes(range=[0, 0.2])  # Specify the min and max values for the y-axis


fig.show()


```


# Example \#2: Discussion of Momentum

## Momentum effect teaching discussions

::: {.nonincremental}
- What if we sort stocks based on prior realized returns?

- How has this effect varied over time?
:::

[Sorts on Characteristics](https://learn-investments.rice-business.org/factor-investing/quintiles)

. . .

::: {.nonincremental}
- Can a retail investor get momentum exposure?
:::
[Evaluation of Mutual Funds](https://learn-investments.rice-business.org/capm/sml-industries)



## Sorts on Momentum
```{python}
# Date Range (input a year)
start_yr = 1980
stop_yr  = 2023

# Characteristic for second sort (1st is market equity)
key = "Momentum"

import numpy as np
import pandas as pd
from pandas_datareader import DataReader as pdr
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# associate names of French files with characteristic names
files = {'Earnings to price ratio': 'Portfolios_Formed_on_E-P',\
 'Variance': 'Portfolios_Formed_on_VAR',\
 'Accruals': 'Portfolios_Formed_on_AC',\
 'Residual variance': 'Portfolios_Formed_on_RESVAR',\
 'Net equity issuance': 'Portfolios_Formed_on_NI',\
 'Beta': 'Portfolios_Formed_on_BETA',\
 'Cash flow to price': 'Portfolios_Formed_on_CF-P',\
 'Market equity': 'Portfolios_Formed_on_ME',\
 'Book to market ratio': 'Portfolios_Formed_on_BE-ME',\
 'Dividend to price ratio': 'Portfolios_Formed_on_D-P',\
 'Investment rate': 'Portfolios_Formed_on_INV',\
 'Momentum': '10_Portfolios_Prior_12_2',\
 'Short term reversal': '10_Portfolios_Prior_1_0',\
 'Long term reversal': '10_Portfolios_Prior_60_13'}

# sort characteristics in alphabetical order
keys = np.sort(list(files.keys()))

# read value-weighted monthly returns in decimal format
f = files[key]
d = pdr(f,'famafrench',start=1920)[2]/100

# for momentum and reversal files, combine deciles to form quintiles
if 'Portfolios_Formed_on' not in f :
    cols = d.columns.to_list()
    d['Lo 20'] = d[cols[:2]].mean(axis=1)
    d['Qnt 2'] = d[cols[2:4]].mean(axis=1)
    d['Qnt 3'] = d[cols[4:6]].mean(axis=1)
    d['Qnt 4'] = d[cols[6:8]].mean(axis=1)
    d['Hi 20'] = d[cols[8:]].mean(axis=1)
    quintiles = ['Lo 20','Qnt 2','Qnt 3','Qnt 4','Hi 20']
    d = d[quintiles]
# for other files, extract quintiles
else :    
    quintiles = ['Lo 20','Qnt 2','Qnt 3','Qnt 4','Hi 20']
    d = d[quintiles].copy()

d = d.reset_index()
d["Date"] = d.Date.astype(str).astype(int)
d = d.set_index("Date").dropna()
rets = d.copy()

# Subset for date window
mindate = max(start_yr, rets.index[0])
rets = rets.loc[mindate : stop_yr]

accum = (1 + rets).cumprod()
accum.loc[mindate - 1] = 1
accum = accum.sort_index()

rets = rets.stack().reset_index()
rets.columns = ["Date", "Quintile", "Return"]

accum = accum.stack().reset_index()
accum.columns = ["Date", "Quintile", "Accumulation"]


import plotly.express as px

string = "$%{y:,.2f}<extra></extra>"
fig2 = px.line(accum, x="Date", y="Accumulation", color="Quintile", log_y=True)
fig2.update_traces(mode="lines", hovertemplate=string)
fig2.update_layout(
    xaxis_title="Date",
    yaxis_title="Compound Return (Log Scale)",
    hovermode="x unified",
    legend = dict(
        yanchor="top",
        y=0.99,
        xanchor="left",
        x=0.01
    )
)
fig2.show()
```

## Market-model regression: MOM 

```{python}
TICKER    = 'MOM'
BENCHMARK = 'SPY'

#### Some potential benchmark ETFs: 
# 'SPY = S&P 500 ETF', 
# 'IVE = S&P 500 Value ETF', 
# 'IVW = S&P 500 Growth ETF', 
# 'IWB = Russell 1000 ETF', 
# 'IWD = Russell 1000 Value ETF', 
# 'IWF = Russell 1000 Growth ETF', 
# 'IWM = Russell 2000 ETF', 
# 'IWN = Russell 2000 Value ETF', 
# 'IWO = Russell 2000 Growth ETF', 
# 'IWV = Russell 3000 ETF'

# Date Range (input a year)
start_yr = 2000
stop_yr  = 2023

import numpy as np
import pandas as pd
from pandas_datareader import DataReader as pdr
import statsmodels.api as sm
from scipy.stats import ttest_1samp as ttest
import yfinance as yf
import plotly.graph_objects as go
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# fund returns
rets = yf.download(TICKER, start='1970-01-01', progress=False)
rets = rets['Adj Close'].resample('M').last().pct_change().dropna()
rets.name = TICKER
rets.index = rets.index.to_period('M')

# benchmark returns
benchmark = yf.download(BENCHMARK,start='1970-01-01', progress=False)
benchmark = benchmark['Adj Close'].resample('M').last().pct_change().dropna()
benchmark.name = BENCHMARK
benchmark.index = benchmark.index.to_period('M')

# ff_monthly data
ff3    = pdr('F-F_Research_Data_Factors','famafrench', start=1900)[0]/100
ff5    = pdr('F-F_Research_Data_5_Factors_2x3','famafrench', start=1900)[0]/100
Mom    = pdr('F-F_Momentum_Factor','famafrench', start=1900)[0]/100
ST_Rev = pdr('F-F_ST_Reversal_Factor','famafrench', start=1900)[0]/100
LT_Rev = pdr('F-F_LT_Reversal_Factor','famafrench', start=1900)[0]/100
ff48   = pdr("48_Industry_Portfolios", "famafrench", start=1900)[0]/100

facts = pd.concat((ff5, Mom, ST_Rev, LT_Rev), axis=1).dropna()

# combine data
df = pd.concat((rets, benchmark, facts), axis=1).dropna()
df[TICKER + '-RF']   = df[TICKER] - df.RF
df[BENCHMARK +'-RF'] = df[BENCHMARK] - df.RF


# Subset for start and end dates
start = str(start_yr)+'-01'
stop  = str(stop_yr)+'-12'
df = df.loc[start:stop]

# Beta-adjusted benchmark
y = df[TICKER + '-RF']
X = sm.add_constant(df[BENCHMARK +'-RF'])
results = sm.OLS(y,X).fit()

import plotly.express as px

df2 = df.copy()
df2 = df2.reset_index()
df2['Date'] = df2.Date.astype(str)
fig = px.scatter(
    df2,
    x=BENCHMARK +'-RF',
    y=TICKER +'-RF',
    trendline="ols",
    hover_data={x: False for x in df2.columns.to_list()},
    hover_name="Date",
    )

fig.update_traces(
        marker=dict(
            size=12, 
            line=dict(width=2, color="DarkSlateGrey")
        ),
        selector=dict(mode="markers"),
)
fig.update_layout(
    yaxis_title="Monthly Benchmark Excess Return",
    xaxis_title="Monthly Excess Return",
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    template="plotly_white",
)
fig.show()

```


## Active and market benchmark returns: MOM 
```{python}
beta = results.params[BENCHMARK +'-RF']
contribs = pd.DataFrame(dtype=float, index=df.index, columns=['Active', 'Benchmark'])
contribs['Benchmark'] = beta*df[BENCHMARK] + (1-beta)*df.RF
contribs['Active'] = df[TICKER] - contribs['Benchmark']
cum = (1 + contribs).cumprod()

fig = go.Figure()
trace= go.Scatter(
    x=cum.index.astype(str), 
    y=cum.Active, 
    name='Active', 
    hovertemplate="Active: %{y:.2f}<extra></extra>"
)
fig.add_trace(trace)
trace= go.Scatter(
    x=cum.index.astype(str), 
    y=cum.Benchmark, 
    name='Benchmark', 
    hovertemplate="Benchmark: %{y:.2f}<extra></extra>"
)
fig.add_trace(trace)
fig.update_layout(
    yaxis_title="Compound Return",
    xaxis_title="Date",
    hovermode='x unified',
    template="plotly_white",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.01
    )
)
fig.show()
```


## Active and multi-factor benchmark returns: MOM
```{python}
factors = facts.drop(columns='RF').columns.to_list()
result = sm.OLS(df[TICKER +'-RF'], sm.add_constant(df[factors])).fit()
ff_r2 = result.rsquared

contribs = pd.DataFrame(dtype=float, index=df.index, columns=['Active']+factors)
for col in contribs.columns:
    if col not in ['Active']:
        contribs[col] = df[col] * result.params[col]
contribs['Active'] = df[TICKER+'-RF'] - contribs[factors].sum(axis=1)
contribs


cum = (1 + contribs).cumprod()
cum = cum.reset_index()
cum.Date = cum.Date.astype(str)

fig = go.Figure()
cols = [x for x in cum.columns if x!='Date']
for source in cols:
    # Exclude market excess return for ease of viewing:
    if source != 'Mkt-RF':
        trace = go.Scatter(x=cum.Date, y=cum[source],
                            hovertemplate=source + ": %{y:.2f}<extra></extra>",
                            name=source)
        fig.add_trace(trace)

fig.update_layout(
    yaxis_title="Compound Return",
    xaxis_title="Date",
    hovermode='x unified',
    template="plotly_white",
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.01
    )
)
fig.show()
```


# Example \#3: Option valuation

## Option valuation teaching discussions

::: {.nonincremental}
- Visualizing Black-Scholes option valuation through simulation
:::

[Monte Carlo Option Valuation](https://learn-investments.rice-business.org/futures-options/monte-carlo) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/learn-investments/notebooks/blob/main/futures%20and%20options/monte%20carlo%20option%20valuation.ipynb)


##  

::: {.nonincremental}
- Link: [https://learn-investments.rice-business.org](https://learn-investments.rice-business.org)

- We welcome all users

- Comments and suggestions welcome:
  - feedback@learn-investments.org
::: 

<br><br><br><br>

![](RiceLogo.png){fig-align="center"}

