---
title: 'Asset Classes: Stocks'
author: "<br>Kevin Crotty<br>BUSI 448: Investments"
format: 
    revealjs:
        incremental: true
        logo: RiceLogo.png
        footer: "BUSI 448"
        self-contained: true
        code-fold: true
        theme: [default, custom.scss]
        show-slide-number: print
        menu: 
            width: wide
            numbers: true             
execute:
    echo: false
    freeze: auto
jupyter: python3
---



## Asset Classes

- Equity markets

- Fixed income markets

- Money markets

. . . 

Today, we'll focus on some empirical facts about the stock market.

## Some empirical facts for today

- Over long horizons, average returns in the US stock market have been exceeded those of bonds.
- Stock returns are risky; that is, volatile.
- Stock return distributions are fat-tailed and negatively skewed.
- Past aggregate returns do **not** predict future aggregate returns.
- Volatility is time-varying and persistent.


<!--                       -->
<!-- STOCK INDICES         -->
<!--                       -->

## Stock Market Indices

- S&P Indices
  - 500, Midcap 400, Smallcap 600
  - value-weighted index
- Dow Jones
  - price-weighted index
- Russell
  - 1000 + 2000 $\rightarrow$ 3000
- MSCI int'l indices
- FTSE, DAX, Hang Seng, etc.

<!--                       -->
<!-- ANNUAL RETURNS        -->
<!--                       -->
# Annual Returns
## Time-series

```{python}
import pandas as pd
import numpy as np
from pandas_datareader import DataReader as pdr
import plotly.graph_objects as go

# Monthly returns
mrets = pdr('F-F_Research_Data_Factors','famafrench', start=1900)[0]/100
# Clean-up missings
for c in mrets.columns:
    mrets[c] = np.where(mrets[c]==-99.99, np.nan, mrets[c])
mmkt = mrets['Mkt-RF'] + mrets['RF']

# Daily returns
drets = pdr('F-F_Research_Data_Factors_daily','famafrench', start=1900)[0]/100
drets.index = drets.index.to_period('D')
# Clean-up missings
for c in drets.columns:
    drets[c] = np.where(drets[c]==-99.99, np.nan, drets[c])
dmkt = drets['Mkt-RF'] + drets['RF']

# Annual returns
amkt = (1+mmkt).resample('Y').prod()-1
amkt.index = amkt.index.astype(str)
amkt = amkt.reset_index()
amkt.columns = ['year','ret']

# Plot annual returns
fig = go.Figure()
trace= go.Scatter(x=amkt.year, y=amkt.ret)
fig.add_trace(trace)
# some formatting
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Year",
    yaxis_title="Return",
    yaxis_tickformat=".0%"
)
fig.show()
```


## Distribution

```{python}
# Plot the distribution of annual returns
fig = go.Figure()
trace= go.Histogram(x=amkt.ret, histnorm='percent',hovertemplate="<br>%{y:.2}% of years <br><extra></extra>")
fig.add_trace(trace)
# some formatting
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Annual Market Return",
    yaxis_title="Percent of Years",
    xaxis_tickformat=".0%"
)
fig.show()
```



##  Compounded return

```{python}
# Plot compound return
compound = (1+amkt.ret).cumprod()
trace = go.Scatter(
    x=amkt.year,
    y=compound,
        hovertemplate="%{x}<br>$%{y:.2f}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    xaxis_title="",
    yaxis_title="Accumulation from $1",
    yaxis_tickformat=",.0f",
    width=1000,
    height=460,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="right", 
        x=0.99
    )
  )
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)
fig.show()
```

value of $1 investment with dividends reinvested

## Compounded returns on log scale: motivation

  - Let's look at accumulations from two hypothetical stocks. 
    - stock 1: 10% per year 
    - stock 1: 2% per year until 2000 and 10% afterwards
  - It will appear that stock 2 did nothing before 2000 and earned a lot less than stock 1 even after 2000.

## Plot of the Example 

. . .

```{python}
r1 = np.cumprod([1] + 51*[1.1])
r2 = np.cumprod([1] + 30*[1.02] + 21*[1.1])
years = np.arange(1970, 2022)
trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)
trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>accum = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    xaxis_title="",
    yaxis_title="Accumulation",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickprefix="$", 
    yaxis_tickformat=",.0f",
    width=1000,
    height=520,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    )
)
fig.show()
```


## Log (base 10) of accumulation

. . .

```{python}
trace1 = go.Scatter(
  x=years,
  y=np.log10(r1),
  mode="lines",
  name="stock 1"
)
trace2 = go.Scatter(
  x=years,
  y=np.log10(r2),
  mode="lines",
  name="stock 2"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>log = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    xaxis_title="",
    yaxis_title="Log of Accumulation",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=",.1f",
    width=1000,
    height=520,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    )
)
fig.show()
```


## Map $y$ tick labels to dollars

. . .


```{python}
trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)
trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>$%{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    xaxis_title="",
    yaxis_title="Accumulation",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_type="log",
    yaxis_tickformat=",.0f",
    yaxis_tickprefix="$",
    width=1000,
    height=520,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    ),
    yaxis = dict(
        tickmode = 'array',
        tickvals = [1, 2, 5, 10, 20, 50, 100],
    )
)
fig.show()
```


##  Compounded market returns on log scale

```{python}
# Plot compound return (log scale)
compound = (1+amkt.ret).cumprod()
trace = go.Scatter(
    x=amkt.year,
    y=compound,
        hovertemplate="%{x}<br>$%{y:.2f}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    xaxis_title="",
    yaxis_title="Accumulation from $1",
    yaxis_tickformat=",.0f",
    width=1000,
    height=460,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="right", 
        x=0.99
    ),
    yaxis_type="log",
    yaxis = dict(
        tickmode = 'array',
        tickvals = [2, 5, 10, 50, 100, 500, 2500, 10000],
    )    
  )
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)
fig.show()
```

value of $1 investment with dividends reinvested


## {background-iframe="https://bbcx-investments.com/risk/returns" background-interactive="True"}


## Does last year's return predict this year's?

- How would we test this?
- Autocorrelation is the correlation of a time series with its own lagged values.
- Autocorrelation at lag 1 tells us whether the current value predicts the next one. $$ r_t = a + \rho \cdot r_{t-1} + \varepsilon_t $$
- What should be true of $\rho$?

## Does last year's return predict this year's?
```{python}
import statsmodels.formula.api as smf
amkt['lag'] = amkt['ret'].shift()
amkt = amkt.dropna().copy()
result = smf.ols("ret ~ lag", data=amkt).fit()
amkt['predict'] = result.params['Intercept'] + result.params['lag']*amkt.lag
# print(result.summary())

# scatter plot + regression line
fig = go.Figure()
trace1 = go.Scatter(
  x=amkt.lag,
  y=amkt.ret,
  text=amkt.year,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=10)
)
fig.add_trace(trace1)

trace2 = go.Scatter(
  x=amkt.lag,
  y=amkt.predict,
  mode="lines",
  name="regression line",
)
fig.add_trace(trace2)
fig.update_layout(
    xaxis_title="Lagged Return",
    yaxis_title="Return",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    width=1000,
    height=500,
)
fig.show()
```




<!--                       -->
<!-- MONTHLY RETURNS        -->
<!--                       -->
# Monthly Returns
## Time-series

```{python}
mmkt.index = mmkt.index.astype(str)
mmkt = mmkt.reset_index()
mmkt.columns = ['month','ret']

# Plot monthly time-series
fig = go.Figure()
trace= go.Scatter(x=mmkt.month, y=mmkt.ret)
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Month",
    yaxis_title="Return",
    yaxis_tickformat=".0%"
)
fig.show()
```


## Distribution

```{python}
# Plot the distribution of monthly returns
fig = go.Figure()
trace= go.Histogram(x=mmkt.ret, histnorm='percent',hovertemplate="<br>%{y:.2}% of months <br><extra></extra>")
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Monthly Market Return",
    yaxis_title="Percent of Months",
    xaxis_tickformat=".0%"
)
fig.show()
```



##  Empirical vs. normal distribution

```{python}
from scipy.stats import norm
from scipy.stats import gaussian_kde as kde

# Density of actual returns
grid = np.linspace(np.min(mmkt.ret), np.max(mmkt.ret), 400)
empirical_density = kde(mmkt.ret)
trace1 = go.Scatter(x=grid,y=empirical_density(grid), mode="lines", name="actual")

# normal density with same mean and SD
m = mmkt.ret.mean()
s = mmkt.ret.std()
normal_density = norm.pdf(grid, loc=m, scale=s)
trace2= go.Scatter(x=grid, y=normal_density, mode='lines',name='normal')

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Monthly Market Return",
    yaxis_title="Density",
    xaxis_tickformat=".0%"
)
fig.show()
```



## Does last month's return predict this month's?

```{python}
mmkt['lag'] = mmkt['ret'].shift()
mmkt = mmkt.dropna().copy()
result = smf.ols("ret ~ lag", data=mmkt).fit()
mmkt['predict'] = result.params['Intercept'] + result.params['lag']*mmkt.lag

# scatter plot + regression line
fig = go.Figure()
trace1 = go.Scatter(
  x=mmkt.lag,
  y=mmkt.ret,
  text=mmkt.month,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=10)
)
fig.add_trace(trace1)

trace2 = go.Scatter(
  x=mmkt.lag,
  y=mmkt.predict,
  mode="lines",
  name="regression line",
)
fig.add_trace(trace2)
fig.update_layout(
    xaxis_title="Lagged Return",
    yaxis_title="Return",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    width=1000,
    height=500,
)
fig.show()
```

## Autocorrelations

```{python}
from statsmodels.graphics.tsaplots import plot_acf
import matplotlib.pyplot as plt
plt.style.use('classic')
plt.rcParams.update({'font.size': 26})
fig = plot_acf(mmkt.ret)
plt.xlabel("Year")
plt.ylabel("Autocorrelation")
plt.title("")
_ = fig.set_size_inches(20,10)
```

- For monthly data, autocorrelation might be high at lag 12 (seasonality).

<!--                       -->
<!-- DAILY RETURNS         -->
<!--                       -->
# Daily Returns
## Daily market returns

. . .

```{python}
dmkt.index = dmkt.index.astype(str)
dmkt = dmkt.reset_index()
dmkt.columns = ['date','ret']

# Plot time-series
fig = go.Figure()
trace= go.Scatter(x=dmkt.date, y=dmkt.ret)
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Year",
    yaxis_title="Return",
    yaxis_tickformat=".0%"
)
fig.show()
```


## Empirical vs. normal distribution

```{python}
from scipy.stats import norm
from scipy.stats import gaussian_kde as kde

# Density of actual returns
grid = np.linspace(np.min(dmkt.ret), np.max(dmkt.ret), 400)
empirical_density = kde(dmkt.ret)
trace1 = go.Scatter(x=grid,y=empirical_density(grid), mode="lines", name="actual")

# normal density with same mean and SD
m = dmkt.ret.mean()
s = dmkt.ret.std()
normal_density = norm.pdf(grid, loc=m, scale=s)
trace2= go.Scatter(x=grid, y=normal_density, mode='lines',name='normal')

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Daily Market Return",
    yaxis_title="Density",
    xaxis_tickformat=".0%"
)
fig.show()
```
Normal distribution has same mean and std dev as actual.<br>x-axis range is minimum to maximum return.


## {background-iframe="https://bbcx-investments.com/risk/frequencies" background-interactive="True"}

## Does today's return predict tomorrow's?
. . .

```{python}
dmkt['lag'] = dmkt['ret'].shift()
dmkt = dmkt.dropna().copy()
result = smf.ols("ret ~ lag", data=dmkt).fit()
dmkt['predict'] = result.params['Intercept'] + result.params['lag']*dmkt.lag

# scatter plot + regression line
fig = go.Figure()
trace1 = go.Scatter(
  x=dmkt.lag,
  y=dmkt.ret,
  text=dmkt.date,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=10)
)
fig.add_trace(trace1)

trace2 = go.Scatter(
  x=dmkt.lag,
  y=dmkt.predict,
  mode="lines",
  name="regression line",
)
fig.add_trace(trace2)
fig.update_layout(
    xaxis_title="Lagged Return",
    yaxis_title="Return",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    width=1000,
    height=500,
)
fig.show()
```

No, the autocorrelation is almost zero.

## Autocorrelations of daily market returns

. . .

```{python}
from statsmodels.graphics.tsaplots import plot_acf
import matplotlib.pyplot as plt
plt.style.use('classic')
plt.rcParams.update({'font.size': 26})
fig = plot_acf(dmkt.ret)
plt.xlabel("Day")
plt.ylabel("Autocorrelation")
plt.title("")
_ = fig.set_size_inches(18,9)
```




# Volatility

## Measuring volatility

1. Monthly series of SD(daily returns)

2. Daily series of absolute value of returns


## Time-series of monthly volatility

```{python}
dmkt['DATE']=pd.to_datetime(dmkt['date'])
dmkt['month'] = dmkt.DATE.dt.to_period('M')
volatility = dmkt.groupby('month')['ret'].std()
volatility.index = volatility.index.astype(str)
volatility = volatility.reset_index()
volatility.columns=['month','sd_dret']
volatility

# Plot monthly time-series
fig = go.Figure()
trace= go.Scatter(x=volatility.month, y=volatility.sd_dret)
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Month",
    yaxis_title="Volatility",
    yaxis_tickformat=".0%"
)
fig.show()
```

## Does last month's SD(ret) predict this month's?

```{python}
volatility['lag'] = volatility['sd_dret'].shift()
volatility = volatility.dropna()
result = smf.ols("sd_dret ~ lag", data=volatility).fit()
volatility['predict'] = result.params['Intercept'] + result.params['lag']*volatility.lag

# scatter plot + regression line
fig = go.Figure()
trace1 = go.Scatter(
  x=volatility.lag,
  y=volatility.sd_dret,
  text=volatility.month,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=10)
)
fig.add_trace(trace1)

trace2 = go.Scatter(
  x=volatility.lag,
  y=volatility.predict,
  mode="lines",
  name="regression line",
)
fig.add_trace(trace2)
fig.update_layout(
    xaxis_title="Lagged Volatility",
    yaxis_title="Volatility",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    width=1000,
    height=500,
)
fig.show()
```



## Autocorrelations of monthly volatility

```{python}
fig = plot_acf(volatility.sd_dret)
plt.xlabel("Month")
plt.ylabel("Autocorrelation")
plt.title("")
_ = fig.set_size_inches(18,9)
```




## Time-series of daily absolute return

```{python}
row1990 = dmkt[dmkt.date=='1990-01-02'].index[0]
dmkt1990 = dmkt.iloc[row1990:].copy()
dmkt1990['abs_ret'] = np.abs(dmkt1990.ret)

# Plot daily time-series
fig = go.Figure()
trace= go.Scatter(x=dmkt1990.date, y=dmkt1990.abs_ret)
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Date",
    yaxis_title="Volatility",
    yaxis_tickformat=".0%"
)
fig.show()
```

## Does yesterday's abs(ret) predict today's?

```{python}
dmkt1990['lag'] = dmkt1990['abs_ret'].shift()
dmkt1990 = dmkt1990.dropna()
result = smf.ols("abs_ret ~ lag", data=dmkt1990).fit()
dmkt1990['predict'] = result.params['Intercept'] + result.params['lag']*dmkt1990.lag

# scatter plot + regression line
fig = go.Figure()
trace1 = go.Scatter(
  x=dmkt1990.lag,
  y=dmkt1990.abs_ret,
  text=dmkt.date,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=10)
)
fig.add_trace(trace1)

trace2 = go.Scatter(
  x=dmkt1990.lag,
  y=dmkt1990.predict,
  mode="lines",
  name="regression line",
)
fig.add_trace(trace2)
fig.update_layout(
    xaxis_title="Lagged Absolute Return",
    yaxis_title="Absolute Return",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    width=1000,
    height=500,
)
fig.show()
```



## Autocorrelations of daily absolute return

```{python}
fig = plot_acf(dmkt1990.abs_ret)
plt.xlabel("Day")
plt.ylabel("Autocorrelation")
plt.title("")
_ = fig.set_size_inches(18,9)
```





<!--                       -->
<!-- LONG-RUN RISKS        -->
<!--                       -->

# Long-Run Risks
## Betting on the stock market 

- Based on history, the bet is definitely in our favor.  

- Play for a long time $\Rightarrow$ almost certainly come out ahead.

- But how far ahead is quite uncertain.

    - In [worst 20-year period]{style="color:tomato; font-weight:bold"} in U.S. stock market since 1926, [\$1 $\rightarrow$ \$1.73]{style="color:tomato; font-weight:bold"}, a geometric average return of 2.8% per year (1929-1948).
    - In [best 20-year period]{style="color:tomato; font-weight:bold"} since 1926, [\$1 $\rightarrow$ \$24.65]{style="color:tomato; font-weight:bold"}, a geometric average return of 17.4% per year (1980-1999).

## {background-iframe="http://bbcx-investments.com/risk/best-worst" background-interactive="True"}


## Saving with risky returns 

- Let's revisit our savings problem with **uncertain** returns
- Mean and std dev of U.S. market return 1970-2021 was 12.5% and 17.4%.
- Simulate 20-year compounded returns.
- On average, what would $1 turn into?
- What is the median amount $1 turns into?


## Monte Carlo Analysis: simulate returns

```{.p code-line-numbers="1-4|6-17"}
from scipy.stats import norm
MEAN, SD = 0.125, 0.174
N_SAVING = 20
PMT, PV  = 0.0, 1.0

def endbal(mean, sd, n_saving, pmt):
    acct = pd.DataFrame(dtype=float,columns=['begbal','return','capgain','deposit','endbal'],index=np.arange(1,N_SAVING+1))
    acct.deposit = PMT
    acct['return'] = norm.rvs(loc=MEAN,scale=SD, size=N_SAVING)
    for t in acct.index:
        if t==1:
            acct.loc[t,'begbal'] = PV
        else:
            acct.loc[t,'begbal'] = acct.loc[t-1,'endbal']
        acct.loc[t,'capgain'] = acct.loc[t,'begbal']*acct.loc[t,'return']
        acct.loc[t,'endbal'] = acct.loc[t,'begbal'] + acct.loc[t,'capgain'] + acct.loc[t,'deposit']
    return acct.loc[N_SAVING,'endbal']
```


## Monte Carlo Analysis: simulate returns

. . .


```{.p code-line-numbers="1-5|7-9"}
NSIMS    = 1000
df = pd.DataFrame(dtype=float,columns=['endbal'], index=np.arange(NSIMS))
for s in df.index:
    df.loc[s,'endbal']=endbal(MEAN,SD,N_SAVING,PMT)
df.describe()

# More pythonic code
data = [endbal(MEAN,SD,N_SAVING,PMT) for s in np.arange(NSIMS)]
df = pd.DataFrame(data, columns=['endbal'])
```

## Distribution

```{python}
from scipy.stats import norm
MEAN, SD = 0.125, 0.174
N_SAVING = 20
PMT, PV  = 0.0, 1.0
NSIMS    = 1000

# function to capture ending balance
def endbal(mean, sd, n_saving, pmt):
    acct = pd.DataFrame(dtype=float,columns=['begbal','return','capgain','deposit','endbal'],index=np.arange(1,N_SAVING+1))
    acct.deposit = PMT
    acct['return'] = norm.rvs(loc=MEAN,scale=SD, size=N_SAVING)
    for t in acct.index:
        if t==1:
            acct.loc[t,'begbal'] = PV
        else:
            acct.loc[t,'begbal'] = acct.loc[t-1,'endbal']
        acct.loc[t,'capgain'] = acct.loc[t,'begbal']*acct.loc[t,'return']
        acct.loc[t,'endbal'] = acct.loc[t,'begbal'] + acct.loc[t,'capgain'] + acct.loc[t,'deposit']

    pd.options.display.float_format = '{:,.2f}'.format
    endbal = acct.loc[N_SAVING,'endbal']
    return endbal


df = pd.DataFrame(dtype=float,columns=['endbal'], index=np.arange(NSIMS))
for s in df.index:
    df.loc[s,'endbal']=endbal(MEAN,SD,N_SAVING,PMT)

# Plot the distribution of annual returns
fig = go.Figure()
trace= go.Histogram(x=df.endbal, histnorm='percent',hovertemplate="<br>%{y:.2}% of simulations <br><extra></extra>")
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.update_layout(
    xaxis_title="Ending Balance",
    yaxis_title="Percent of Years",
    xaxis_tickformat="$,.0f"
)
fig.show()    
```

:::

## Retirement Planning Simulation

Uncertainty about long-run returns $\Rightarrow$ uncertainty about retirement plans.

- Revisit the retirement plan
- Generate random returns and simulate many lifetimes.

## {background-iframe="https://bbcx-investments.com/borrowing-saving/retirement-planning-sim" background-interactive="True"}




# For next time: Fixed Income Markets

<br><br><br><br>

![](RiceLogo.png){fig-align="center"}