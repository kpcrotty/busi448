---
title: 'Portfolios: Rebalancing'
author: "<br>Kevin Crotty<br>BUSI 448: Investments"
format: 
    revealjs:
        incremental: true
        logo: RiceLogo.png
        footer: "BUSI 448"
        self-contained: true
        code-fold: true
        theme: [default, custom.scss]
        show-slide-number: print
execute:
    echo: true
    freeze: auto
jupyter: python3
---


```{python}
#| echo: false
#| execute: true
import numpy as np
from cvxopt import matrix
from cvxopt.solvers import qp as Solver, options as SolverOptions
from scipy.optimize import minimize_scalar

SolverOptions["show_progress"] = False

class portfolio:
    def __init__(self, means, cov, Shorts):
        self.means = np.array(means)
        self.cov = np.array(cov)
        self.Shorts = Shorts
        self.n = len(means)
        if Shorts:
            w = np.linalg.solve(cov, np.ones(self.n))
            self.GMV = w / np.sum(w)
            w = np.linalg.solve(cov, means)
            self.piMu = w / np.sum(w)
        else:
            n = self.n
            Q = matrix(cov, tc="d")
            p = matrix(np.zeros(n), (n, 1), tc="d")
            G = matrix(-np.identity(n), tc="d")
            h = matrix(np.zeros(n), (n, 1), tc="d")
            A = matrix(np.ones(n), (1, n), tc="d")
            b = matrix([1], (1, 1), tc="d")
            sol = Solver(Q, p, G, h, A, b)
            self.GMV = np.array(sol["x"]).flatten() if sol["status"] == "optimal" else np.array(n * [np.nan])

    def frontier(self, m):
        if self.Shorts:
            gmv = self.GMV
            piMu = self.piMu
            m1 = gmv @ self.means
            m2 = piMu @ self.means
            a = (m - m2) / (m1 - m2)
            return a * gmv + (1 - a) * piMu
        else:
            n = self.n
            Q = matrix(self.cov, tc="d")
            p = matrix(np.zeros(n), (n, 1), tc="d")
            G = matrix(-np.identity(n), tc="d")
            h = matrix(np.zeros(n), (n, 1), tc="d")
            A = matrix(np.vstack((np.ones(n), self.means)), (2, n), tc="d")
            b = matrix([1, m], (2, 1), tc="d")
            sol = Solver(Q, p, G, h, A, b)
            return np.array(sol["x"]).flatten() if sol["status"] == "optimal" else np.array(n * [np.nan])

    def tangency(self, r):
        if self.Shorts:
            w = np.linalg.solve(self.cov, self.means - r)
            return w / np.sum(w)
        else:
            def f(m):
                w = self.frontier(m)
                mn = w @ self.means
                sd = np.sqrt(w.T @ self.cov @ w)
                return - (mn - r) / sd
            m = minimize_scalar(f, bounds=[max(r, np.min(self.means)), max(r, np.max(self.means))], method="bounded").x
            return self.frontier(m)

    def optimal(self, raver, rs=None, rb=None):
        n = self.n
        if self.Shorts:
            if (rs or rs==0) and (rb or rb==0):
                Q = np.zeros((n + 2, n + 2))
                Q[2:, 2:] = raver * self.cov
                Q = matrix(Q, tc="d")
                p = np.array([-rs, rb] + list(-self.means))
                p = matrix(p, (n + 2, 1), tc="d")
                G = np.zeros((2, n + 2))
                G[0, 0] = G[1, 1] = -1
                G = matrix(G, (2, n+2), tc="d")
                h = matrix([0, 0], (2, 1), tc="d")
                A = matrix([1, -1] + n*[1], (1, n+2), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten()[2:] if sol["status"] == "optimal" else None
            else:
                w = np.linalg.solve(self.cov, self.means)
                a = np.sum(w)
                return (a/raver)*self.piMu + (1-a/raver)*self.GMV
        else:
           if (rs or rs==0) and (rb or rb==0):
                Q = np.zeros((n + 2, n + 2))
                Q[2:, 2:] = raver * self.cov
                Q = matrix(Q, tc="d")
                p = np.array([-rs, rb] + list(-self.means))
                p = matrix(p, (n+2, 1), tc="d")
                G = matrix(-np.identity(n + 2), tc="d")
                h = matrix(np.zeros(n+2), (n+2, 1), tc="d")
                A = matrix([1, -1] + n * [1], (1, n+2), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten()[2:] if sol["status"] == "optimal" else None
           else:
                Q = matrix(raver * self.cov, tc="d")
                p = matrix(-self.means, (n, 1), tc="d")
                G = matrix(-np.identity(n), tc="d")
                h = matrix(np.zeros(n), (n, 1), tc="d")
                A = matrix(np.ones(n), (1, n), tc="d")
                b = matrix([1], (1, 1), tc="d")
                sol = Solver(Q, p, G, h, A, b)
                return np.array(sol["x"]).flatten() if sol["status"] == "optimal" else None
```


## Where are we?
**Last time**:

::: {.nonincremental}
- Borrowing frictions
- Short-sales constraints
:::

. . . 

**Today**:

::: {.nonincremental}
- Midterm discussion
- Investing over multiple periods
- Rebalancing
:::

# Midterm comments

# Rebalancing
## 60-40 Stock-Bond Portfolio

```{python}
#| echo: false
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6 
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 3.436364
extra = 0

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(-0.20, 1, 121)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df

def rf_plus_risky(mn, sd, rs, rb, w_min, w_max):
    mn /= 100
    sd /= 100
    rs /= 100
    rb /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rs + w * (mn - rs) if w <= 1 else rb + w * (mn - rb)) for w in grid]
    sds = [w * sd for w in grid]
    srs = (mn - rs)/sd
    srb = (mn - rb)/sd
    return grid, mns, sds, srs, srb

def rf_plus_risky_nokink(mn, sd, rf, w_min, w_max):
    mn /= 100
    sd /= 100
    rf /= 100
    grid = np.linspace(w_min, w_max, 201)
    mns = [(rf + w * (mn - rf)) for w in grid]
    sds = [w * sd for w in grid]
    return grid, mns, sds


def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)

    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        # print(cd)
        string += "<br>"
        for i in range(N):
            if i ==0:
                string += asset1_name
            elif i==1:
                string += asset2_name
            else:
                string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    
    gmv = P.GMV @ mns
    # print('GMV return is: ',gmv)
    if (rs < gmv) or (not Shorts):
        portTang = P.tangency(rs)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rs)/sdTang
            string0 = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string, cd = custom(string0, [portTang], srTang,0)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name=string0
            )
            fig.add_trace(trace)
            
            #Plot CAL (no leverage)
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,0, 2.2)
            portlabel = 'tangency portfolio' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
            string = "wealth in "+portlabel + " = %{text:.0f}%<br>" + "Sharpe ratio: " +  "{:.4f}".format(srTang) +"<extra></extra>"
            trace5 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue"),
                name="CAL: " + portlabel
            )           
            fig.add_trace(trace5)
            
            #Plot CAL (with leverage)
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rs*100,1.0, 2.5)
            trace5a = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue",dash='dot'),
                name="CAL: "  + portlabel + " (levered)"
                # showlegend=False
            )           
            # fig.add_trace(trace5a)           

    if (rb != rs) and ((gmv > rb) or (not Shorts)):
        portTang = P.tangency(rb)
        mnTang = portTang @ mns
        if mnTang < np.max(mns):
            sdTang = np.sqrt(portTang @ cov @ portTang)
            srTang = (mnTang - rb)/sdTang
            string = 'efficient high mean portfolio'
            string, cd = custom(string, [portTang], srTang,1)
            trace = go.Scatter(
                x=[sdTang],
                y=[mnTang],
                mode="markers",
                customdata=cd,
                hovertemplate=string,
                marker=dict(size=10, color="blue"),
                name="efficient high mean portfolio"
            )
            fig.add_trace(trace)
            
            #Plot CAL (with leverage)            
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 1.0, 1.5)
            string = "wealth in efficient high mean portfolio = %{text:.0f}%<br>" + "Sharpe ratio (relative to borrowing rate): " + "{:.4f}".format(srTang) +"<extra></extra>"
            trace6 = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string,
                line=dict(color="blue"),
                name = "CAL: efficient high mean"
            )           
            fig.add_trace(trace6)   
            
            #Plot CAL (without leverage) 
            grid, mns_cal, sds_cal = rf_plus_risky_nokink(mnTang*100, sdTang*100, rb*100, 0, 1)
            trace6a = go.Scatter(
                x=sds_cal, 
                y=mns_cal, 
                mode="lines", 
                text=100 * grid, 
                hovertemplate=string, 
                line=dict(color="blue", dash='dot'),
                name = "CAL: efficient high mean (unlevered)"
            )           
            fig.add_trace(trace6a)      


 
    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.05 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.05 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.5, xanchor="left", x=0.65))
    fig.show()
figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,"Stock","Bond")
```


## What if we leave this portfolio alone? {.nonincremental}

- Suppose returns for the stock fund are 12.3% over the first year and the bond fund returns 5.9% over the same period.

- Weights become: 61.4% and 38.6%

- $$ w_{i,t+1} = w_{i,t}\frac{1+r_{i,t}}{1+r_{p,t}} $$ where $r_{p,t}=\sum_{j=1}^N w_{j,t} r_{j,t}$ is the time $t$ realized portfolio return for an $N$ asset portfolio


## Five years of possible returns
```{python}
#| echo: false
import numpy as np
import pandas as pd
import plotly.graph_objects as go

mn_stock = 6 
mn_bond  = 3.5
sd_stock = 15
sd_bond  = 3.5
corr = -5

rs = 3.436364
extra = 0

def data(mn1, mn2, sd1, sd2, c, rs, extra):
    c = c / 100
    rb = rs + extra   
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    sds = [sd1, sd2]
    grid = np.linspace(-0.20, 1, 121)
    ports = [np.array([w, 1 - w]) for w in grid]
    means = [p.T @ np.array(mns) for p in ports]
    df = pd.DataFrame(means)
    df.columns = ["mean"]
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    df["stdev"] = [np.sqrt(p.T @ cov @ p) for p in ports]
    df["wt1"] = grid
    df["wt2"] = 1 - df.wt1
    for col in ["mean", "stdev"]:
        df[col] = df[col] / 100
    df["sr_s"]= (df["mean"] - rs)/df["stdev"]
    df["sr_b"]= (df["mean"] - rb)/df["stdev"]
   
    return df


def figtbl(mn1, mn2, sd1, sd2, c, rs, extra, asset1_name, asset2_name):
    df = data(mn1, mn2, sd1, sd2, c, rs, extra)
    
    #Plot the portfolios of the two assets
    trace1 = go.Scatter(
        x=df["stdev"],
        y=df["mean"],
        mode="lines",
        # line={'color': green},
        text=100 * df["wt1"],
        customdata=100 * df["wt2"],
        hovertemplate=asset1_name+": %{text:.0f}%<br>"+asset2_name+": %{customdata:.0f}%<extra></extra>",
        line=dict(color="black"),
        name="Stock & Bond Frontier"
    )
    
    # Plot the two assets
    df = df[df.wt1.isin([0, 1])]
    df["text"] = np.where(df.wt1 == 1, asset1_name, asset2_name)
    trace2a = go.Scatter(
        x=df[df.wt1==1]["stdev"],
        y=df[df.wt1==1]["mean"],
        mode="markers",
        text=df[df.wt1==1]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="orange"),
        name=asset1_name
    )
    trace2b = go.Scatter(
        x=df[df.wt1==0]["stdev"],
        y=df[df.wt1==0]["mean"],
        mode="markers",
        text=df[df.wt1==0]["text"],
        hovertemplate="%{text}<extra></extra>",
        marker=dict(size=10, color="red"),
        name=asset2_name
    )

    fig = go.Figure()
    fig.add_trace(trace2a)
    fig.add_trace(trace2b)
    fig.add_trace(trace1)

    def custom(string, ports,srTang,borrow_flag):
        # borrow_flag=1 adds statement about "relative to borrowing rate"
        cd = np.empty(shape=(len(ports), N+1, 1), dtype=float)
        for i in range(N):
            cd[:, i] = np.array([w[i] for w in ports]).reshape(-1, 1)
        cd[:,N] = np.round(srTang,4)
        string += "<br>"
        for i in range(N):
            if i ==0:
                string += asset1_name
            elif i==1:
                string += asset2_name
            else:
                string += "asset " + str(i + 1)
            string += ": %{customdata["
            string += str(i)
            string += "]:.1%}<br>"
        if borrow_flag==1:
            string += "Sharpe ratio (relative to borrowing rate): %{customdata[" +  str(N) + "]:.4f}<br>"    
        else:
            string += "Sharpe ratio: %{customdata[" +  str(N) + "]:.4f}<br>"
        string += "<extra></extra>"
        return string, cd  

    # Plot the tangency portfolios
    c = c / 100
    rb = rs + extra     
    rs = rs/100
    rb = rb/100
    mns = [mn1, mn2]
    mns = np.array(mns) / 100
    sds = [sd1, sd2]
    sds = np.array(sds) / 100
    cov = np.array(
        [[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]
    ).reshape(2, 2)
    
    Shorts = 0.0     
    N = len(mns)
    P = portfolio(mns, cov, Shorts)    

    portTang = P.tangency(rs)
    mnTang = portTang @ mns
    sdTang = np.sqrt(portTang @ cov @ portTang)
    srTang = (mnTang - rs)/sdTang
    string0 = 'Year 1 (tangency portfolio) ' if rb == rs else 'efficient low risk portfolio' if rb != rs else 'tangency portfolio'
    string, cd = custom(string0, [portTang], srTang,0)
    trace = go.Scatter(
        x=[sdTang],
        y=[mnTang],
        mode="markers",
        customdata=cd,
        hovertemplate=string,
        marker=dict(size=10, color="blue"),
        name=string0
    )
    fig.add_trace(trace)

    # Realizations
    realized = np.array([
        [ 0.1229,  0.0589 ],
        [-0.2283, -0.0363],
        [-0.0477,  0.0527],
        [-0.0546,  0.0672],
        [-0.0617,  0.0034]])
    rets = pd.DataFrame(dtype=float, columns=['beg_wgt_stock','beg_wgt_bond','ret_stock','ret_bond', 'end_wgt_stock','end_wgt_bond'], index=np.arange(5)+1)
    rf = rs
    rets[['ret_stock','ret_bond']] = realized
    rets.loc[1,'beg_wgt_stock'] = portTang[0]
    rets.loc[1,'beg_wgt_bond'] = portTang[1]
    for t in rets.index:
        if t > 1:
            rets.loc[t,'beg_wgt_stock'] = rets.loc[t-1,'end_wgt_stock']
            rets.loc[t,'beg_wgt_bond']  = rets.loc[t-1,'end_wgt_bond']
        ws = rets.loc[t,'beg_wgt_stock']
        wb = rets.loc[t,'beg_wgt_bond']
        rs = rets.loc[t,'ret_stock']
        rb = rets.loc[t,'ret_bond']
        rp = ws*rs + wb*rb
        rets.loc[t,'end_wgt_stock'] = ws * (1+rs)/(1+rp)
        rets.loc[t,'end_wgt_bond']  = wb * (1+rb)/(1+rp)
    rets['exp_pret'] = rets.beg_wgt_stock * mns[0] + rets.beg_wgt_bond * mns[1]
    rets['sd_pret']  = np.sqrt(rets.beg_wgt_stock**2 * sds[0]**2  + rets.beg_wgt_bond**2 * sds[1]**2 + 2*rets.beg_wgt_stock*rets.beg_wgt_bond*c*sds[0]*sds[1])        
    rets['sharpe ratio'] = (rets.exp_pret - rf) / rets.sd_pret
    for t in rets.index[1:]:
        string = "<br>Year: %{text:.0f}<br>"
        string += asset1_name
        string += ": %{customdata[0]:.1%}<br>"
        string += asset2_name
        string += ": %{customdata[1]:.1%}<br>"
        string += "Sharpe ratio: %{customdata[2]:.4f}<br>"
        string += "<extra></extra>"
        cd = [rets[['beg_wgt_stock','beg_wgt_bond', 'sharpe ratio']].loc[t]]
        trace = go.Scatter(
            x=[rets.loc[t,'sd_pret']],
            y=[rets.loc[t,'exp_pret']],
            mode="markers",
            customdata = cd,
            text = [t],
            hovertemplate=string,
            marker=dict(size=10),
            name=f'Year {t:.0f}'
        )       
        fig.add_trace(trace)


    
    fig.layout.xaxis["title"] = "Standard Deviation"
    fig.layout.yaxis["title"] = "Expected Return"
    fig.update_xaxes(range=[0, 1.05 * df["stdev"].max()])
    fig.update_yaxes(range=[0, 1.05 * df["mean"].max()])
    fig.update_yaxes(tickformat=".0%")
    fig.update_xaxes(tickformat=".0%")
    fig.update_layout(legend=dict(yanchor="top", y =0.5, xanchor="left", x=0.65))
    fig.show()
figtbl(mn_stock,mn_bond,sd_stock,sd_bond,corr,rs,extra,"Stock","Bond")
```


## 30 years of possible returns
```{python}
#| echo: false
# Package/inputs
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from scipy.stats import multivariate_normal as mvn

mn_stock = 6   /100
mn_bond  = 3.5 /100
sd_stock = 15  /100
sd_bond  = 3.5 /100
corr     = -5  /100
rf       = 3.436364 / 100

# Covariance matrix
sds = [sd_stock, sd_bond]
C  = np.identity(2)
C[0, 1] = C[1, 0] = corr
cov = np.diag(sds) @ C @ np.diag(sds)

# Periods
T = 30


# Realizations
def returns(mn1,mn2, sd1, sd2, c, rf, init_wt1, init_wt2, T,seed):
    mns = [mn1, mn2]
    sds = [sd1, sd2]   
    cov = np.array([[sds[0] ** 2, sds[0] * sds[1] * c], [sds[0] * sds[1] * c, sds[1] ** 2]]).reshape(2, 2)

    realized = mvn.rvs(mns, cov, size=T,random_state=seed)
    
    df = pd.DataFrame(dtype=float, columns=['beg_wgt1','beg_wgt2','ret1','ret2', 'end_wgt1','end_wgt2'], index=np.arange(T)+1)
    df[['ret1','ret2']] = realized
    df.loc[1,'beg_wgt1'] = init_wt1
    df.loc[1,'beg_wgt2'] = init_wt2
    for t in df.index:
        if t > 1:
            df.loc[t,'beg_wgt1'] = df.loc[t-1,'end_wgt1']
            df.loc[t,'beg_wgt2'] = df.loc[t-1,'end_wgt2']
        w1 = df.loc[t,'beg_wgt1']
        w2 = df.loc[t,'beg_wgt2']
        r1 = df.loc[t,'ret1']
        r2 = df.loc[t,'ret2']
        rp = w1*r1 + w2*r2
        df.loc[t,'end_wgt1']  = w1 * (1+r1)/(1+rp)
        df.loc[t,'end_wgt2']  = w2 * (1+r2)/(1+rp)
    df['exp_pret'] = df.beg_wgt1 * mns[0] + df.beg_wgt2 * mns[1]
    df['sd_pret']  = np.sqrt(df.beg_wgt1**2 * sds[0]**2  + df.beg_wgt2**2 * sds[1]**2 + 2*df.beg_wgt1*df.beg_wgt2*c*sds[0]*sds[1])        
    df['sharpe ratio'] = (df.exp_pret - rf) / df.sd_pret
    return df

# Tangency portfolio weights
mns = np.array([mn_stock, mn_bond])
sds = np.array([sd_stock, sd_bond])
cov = np.array([[sds[0] ** 2, sds[0] * sds[1] * corr], [sds[0] * sds[1] * corr, sds[1] ** 2]]).reshape(2, 2)
w = np.linalg.solve(cov, mns - rf)
wgts_tangency = w / np.sum(w) 

# Simulate returns
rets = returns(mn_stock,mn_bond,sd_stock, sd_bond, corr, rf, wgts_tangency[0], wgts_tangency[1], T,29)

# Plot weights
fig = go.Figure()  
string = "<br>Year %{x:.0f}<br>"
string += "Stock Weight: %{y:.1%}<br>"
string += "<extra></extra>"
trace = go.Scatter(
    x=rets.index,
    y=rets['beg_wgt1'],
    mode="lines",
    hovertemplate=string,
    marker=dict(size=10)
)       
fig.add_trace(trace)
fig.add_hline(y=rets.loc[1,'beg_wgt1'], annotation_text="optimal weight")
  
fig.layout.xaxis["title"] = "Year"
fig.layout.yaxis["title"] = "Stock Weight"
fig.update_yaxes(tickformat=".4f")
fig.update_layout(legend=dict(yanchor="top", y =0.5, xanchor="left", x=0.65))
fig.show()
```


## Ex Ante Sharpe Ratios
```{python}
#| echo: false

# Plot Sharpe ratio
fig = go.Figure()  
string = "<br>Year %{x:.0f}<br>"
string += "Stock: %{customdata[0]:.1%}<br>"
string += "Bond: %{customdata[1]:.1%}<br>"
string += "Sharpe ratio: %{customdata[2]:.4f}<br>"
string += "<extra></extra>"
cd = rets[['beg_wgt1','beg_wgt2', 'sharpe ratio']]
trace = go.Scatter(
    x=rets.index,
    y=rets['sharpe ratio'],
    mode="lines",
    customdata=cd,
    hovertemplate=string,
    marker=dict(size=10)
)       
fig.add_trace(trace)
fig.add_hline(y=rets.loc[1,'sharpe ratio'], annotation_text="max Sharpe ratio")
  
fig.layout.xaxis["title"] = "Year"
fig.layout.yaxis["title"] = "Ex Ante Sharpe Ratio"
fig.update_yaxes(tickformat=".4f")
fig.update_layout(legend=dict(yanchor="top", y =0.5, xanchor="left", x=0.65))
fig.show()
```


## Realized Sharpe Ratios

The realized Sharpe ratio of a strategy is its realized average excess return scaled by its realized standard deviation:
$$ SR = \frac{\overline{r_{p} - r_{f}}}{\text{sd}[r_{p} - r_{f}]}$$

. . .

For the particular returns above, the realized Sharpe ratio of rebalancing to 60-40 is -0.0277 versus -0.09 for the non-rebalanced portfolio.

## Realized Sharpe Ratios

What if we ran 1000 versions of the 30 year investment period?
```{python}
#| echo: false
numsims = 1000
sharpes = pd.DataFrame(dtype=float,columns=['rebal','none'],index = np.arange(numsims))
for i in sharpes.index:
    rets = returns(mn_stock,mn_bond,sd_stock, sd_bond, corr, rf, wgts_tangency[0], wgts_tangency[1], T,i)
    rets['ret_rebal'] = wgts_tangency[0]*rets.ret1 + wgts_tangency[1]*rets.ret2
    rets['ret_none']  = rets.beg_wgt1*rets.ret1 + rets.beg_wgt2*rets.ret2
    for var in ['rebal','none']:
        sharpes.loc[i,var] = (rets['ret_'+var].mean()-rf)  / rets['ret_'+var].std()

# Plot data
fig = go.Figure()
frac_pos = ((sharpes.rebal-sharpes.none) >0).mean()
trace = go.Histogram(x=sharpes.rebal-sharpes.none, histnorm='percent',hovertemplate="<br>%{y}% of simulations<br><extra></extra>")
fig.add_trace(trace)
fig.update_traces(marker_line_width=1, marker_line_color='black')
fig.layout.xaxis["title"] = "Difference in Realized Sharpe Ratios:<br> Rebalanced - Non-Rebalanced"
fig.layout.yaxis["title"] = "Percent of Simulations"
fig.add_annotation(x=(sharpes.rebal-sharpes.none).max()*0.8, y=13,
            text="Rebalanced outperforms non-rebalanced in <br>"+f'{frac_pos:.1%} of simulations', showarrow=False)
fig.show()
```

## Rebalancing: 3 assets

```{python}
#| echo: false
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from scipy.optimize import minimize
from scipy.stats import multivariate_normal as mvn

##### Inputs
# Risk-free rate
r = 0.02
# Expected returns
mns = np.array([0.10, 0.05, 0.07])
# Standard deviations
sds = np.array([0.20, 0.12, 0.15])
# Correlations
corr12 = 0.3
corr13 = 0.3
corr23 = 0.3
# Covariance matrix
C  = np.identity(3)
C[0, 1] = C[1, 0] = corr12
C[0, 2] = C[2, 0] = corr13
C[1, 2] = C[2, 1] = corr23
cov = np.diag(sds) @ C @ np.diag(sds)

##### Tangency Portfolio
w = np.linalg.solve(cov, mns - r)
wgts_tangency = w / np.sum(w)
mnTang = mns @ wgts_tangency
sdTang = np.sqrt(wgts_tangency @ cov @ wgts_tangency)
srTang = (mnTang - r)/sdTang

##### Frontier Portfolios
def frontier(means, cov, target):
    n = len(means)
    w = np.linalg.solve(cov, np.ones(n))
    wgts_gmv = w / np.sum(w)
    w = np.linalg.solve(cov, means)
    piMu = w / np.sum(w)
    m1 = wgts_gmv @ means
    m2 = piMu @ means
    a = (target - m2) / (m1 - m2)
    wgts = a * wgts_gmv + (1 - a) * piMu
    return wgts
wgts_frontier = [frontier(mns, cov, m) for m in np.linspace(mns.min(), mns.max(),40)]
mn_frontier = [mns @ w for w in wgts_frontier]
sd_frontier = [np.sqrt(w @ cov @ w) for w in wgts_frontier]


# Simulate return realizations
# Periods
T = 30


# Realizations
def returns(mns, cov, init_wgts, T, seed):
    realized = mvn.rvs(mns, cov, size=T,random_state=seed)


    ret_cols = ['ret' + str(i) for i in range(len(mns))] 
    beg_wgt_cols = ['beg_wgt' + str(i) for i in range(len(mns))] 
    end_wgt_cols = ['end_wgt' + str(i) for i in range(len(mns))] 
    df = pd.DataFrame(dtype=float, columns=beg_wgt_cols + ret_cols + end_wgt_cols + ['exp_pret','sd_pret'], index=np.arange(T)+1)
    df[ret_cols] = realized
    # print(df)
    df.loc[1,beg_wgt_cols] = init_wgts
    for t in df.index:
        if t > 1:
            df.loc[t,beg_wgt_cols] = df.loc[t-1,end_wgt_cols].values
        wgts = df.loc[t,beg_wgt_cols].values
        # print(wgts)
        rets = df.loc[t,ret_cols].values
        # print(rets)
        rp = wgts @ rets
        # print(rp)
        for i, w in enumerate(end_wgt_cols):
            df.loc[t,w] = wgts[i] * (1+rets[i]) / (1+rp)
        df.loc[t,'exp_pret'] = wgts @ mns
        df.loc[t,'sd_pret']  = np.sqrt(wgts @ cov @ wgts)        
    return df


rets = returns(mns, cov, wgts_tangency, T, 26)
rets['sharpe ratio'] = (rets.exp_pret - r) / rets.sd_pret


# Animated plot
# Animated version of picture above
stringFront = "<br>"
stringFront += "Asset 1: %{customdata[0]:.1%}<br>"
stringFront += "Asset 2: %{customdata[1]:.1%}<br>"
stringFront += "Asset 3: %{customdata[2]:.1%}<br>"
stringFront += "<extra></extra>"

stringTang = "<br>Tangency Portfolio:<br>"
stringTang += "Asset 1: %{customdata[0]:.1%}<br>"
stringTang += "Asset 2: %{customdata[1]:.1%}<br>"
stringTang += "Asset 3: %{customdata[2]:.1%}<br>"
stringTang += "Sharpe ratio: %{text:.4f}<br>"
stringTang += "<extra></extra>"

string = "<br>Year %[x:.0f}<br>"
string += "Asset 1: %{customdata[0]:.1%}<br>"
string += "Asset 2: %{customdata[1]:.1%}<br>"
string += "Asset 3: %{customdata[2]:.1%}<br>"
string += "Sharpe ratio: %{customdata[3]:.4f}<br>"
string += "<extra></extra>"


fig = go.Figure(
    data=[go.Scatter(x=sd_frontier, y=mn_frontier, mode="lines", customdata=wgts_frontier, hovertemplate=stringFront, marker=dict(size=10, color="blue")),
          go.Scatter(x=sd_frontier, y=mn_frontier, mode="lines", customdata=wgts_frontier, hovertemplate=stringFront, marker=dict(size=10, color="blue")),
          go.Scatter(x=[sdTang], y=[mnTang], mode="markers", text = [srTang], customdata=[wgts_tangency], hovertemplate=stringTang, marker=dict(size=10, color="blue"))   
          ]+ 
          [go.Scatter(x=[sds[k]], y=[mns[k]], mode="markers", hovertemplate="Asset "+str(k+1)+ "<extra></extra>",
            marker=dict(size=10, color="red")) for k in np.arange(len(mns))],
    layout=go.Layout(
        xaxis=dict(range=[0.7*sds.min(), 1.05*sds.max()], autorange=False, zeroline=False),
        yaxis=dict(range=[0.7*mns.min(), 1.05*mns.max()], autorange=False, zeroline=False),
        hovermode="closest",showlegend=False,
        updatemenus=[dict(type="buttons",
                          buttons=[dict(label="Play",
                                        method="animate",
                                        args=[None,{"frame": {"duration": 800, "redraw": False},"fromcurrent": True}]),
                                #    dict(label="Pause",
                                #         method="animate",
                                #         args=[None,{"frame": {"duration": 0, "redraw": False},"mode": "immediate","transition": {"duration": 0}}]) 
                                        ])]),
    frames=[go.Frame(
        data=[go.Scatter(x=[rets.loc[i,'sd_pret']],y=[rets.loc[i,'exp_pret']],mode="markers",hovertemplate="Year "+str(i) + "<extra></extra>",marker=dict(size=10, color="black")),
            ],
        layout=go.Layout(annotations=[go.layout.Annotation(x=sdTang, y=1.15*mnTang, xref="x", yref="y",
            text="Year " + str(i) +"<br>Sharpe ratio: " +str(np.round(rets.loc[i,'sharpe ratio'],4)),
            showarrow=False, )])) for i in rets.index]
)

fig.show()
```

## Assumptions

We have been assuming:

- returns are independently and identically distributed each period

- the risk-free rate is constant each period.

. . .

This means the tangency portfolio is optimal each period.

. . . 

If expected returns are mean-reverting, then it is also advantageous to rebalance.




## Practical Issues: Taxes

- Rebalancing is a contrarian strategy: sell winners and buy losers.

- Selling winners may result in capital gains taxes

- Potential benefit of improved portfolio allocation vs. potential tax exposure of selling overweighted assets.


## Practical Issues: Transactions Costs

- Similarly, trading may result in fixed or variable transactions costs 

- Potential benefit of improved portfolio allocation vs. expected costs of the rebalancing transactions 


# For next time: Input Sensitivity

<br><br><br><br>

![](RiceLogo.png){fig-align="center"}