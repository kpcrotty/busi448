---
title: 'Returns'
author: "<br>Kevin Crotty<br>BUSI 448: Investments"
format: 
    revealjs:
        incremental: true
        logo: RiceLogo.png
        footer: "BUSI 448"
        self-contained: true
        code-fold: true
        theme: [default, custom.scss]
        show-slide-number: print
        menu: 
            width: wide
            numbers: true        
execute:
    echo: true
    freeze: auto
jupyter: python3
---

## Where are we?
**Last time**:

::: {.nonincremental}
- Saving for retirement
- Real and nominal cash flows and rates
:::

. . . 

**Today**:

::: {.nonincremental}
- Calculating returns
- Fetching data
- Summarizing returns
- Returns of portfolios
:::

# Calculating Returns

## General definition

For an investment, a **gross return** is the value today scaled by the value in a prior period:

$$ \text{Gross Return}_t = \frac{\text{Value}_t}{\text{Value}_{t-1}} .$$

. . .

A **net return** is the *change* in value, scaled by the value in a prior period:
$$ \text{Net Return}_t = \frac{\Delta \text{Value}_t}{\text{Value}_{t-1}} .$$

. . . 

We will usually use net returns in class.

## Stock returns

For stocks, the value today is measured by the current price and any dividends $(D)$.

$$ R_t = \frac{P_t +D_t -P_{t-1}}{P_{t-1}} $$

- Stock prices include future dividends until the **ex-dividend** date
- For computing returns, the dividend goes on the ex day.

## Stock splits

- If a company does an $x$-for-$y$ stock split, then each shareholder gets $x$ new shares for every $y$ of her existing shares.  Shares are worth roughly $y/x$ as much.

- Data vendors routinely compute **split-adjusted prices**, scaling down old prices by the same factor for comparability to new prices.

- Example: finance.yahoo.com is a good source for data.
  - Yahoo's adjusted closing prices are adjusted for splits and also adjusted for dividends on each ex date.


## Bond returns

For bonds, the value today is measured by the current price and any accrued interest $(AI)$ or coupon payments $(C)$.

$$ R_t = \frac{P_t + AI_t + C_t - (P_{t-1}+AI_{t-1})}{P_{t-1}+AI_{t-1}} $$

- Prices quoted as **clean prices**, which exclude accrued interest.
- Trades between coupon payments transact at **dirty price**
  - dirty price = clean price plus accrued interest [(BBCX)](http://bbcx-investments.com/fixed-income/clean-dirty)
  - [sample price paths](http://bbcx-investments.com/fixed-income/clean-dirty-paths)

<!-- ## {background-iframe="http://bbcx-investments.com/fixed-income/clean-dirty" background-interactive="True"} -->

<!-- ## {background-iframe="http://bbcx-investments.com/fixed-income/clean-dirty-paths" background-interactive="True"} -->


## Compounding returns

- We can compound daily returns to get weekly, monthly, or annual returns.

. . .

$$
  (1+r_1)(1+r_2)...(1+r_T)-1
$$
<br/>

- The weekly, etc. returns are as if 
  - the dividend was received on the ex day and reinvested in new shares for stocks, or
  - interest payments were reinvested in the bond.




# Fetching data


## Yahoo Finance package

<br>

Install and import yfinance package



```{.p code-line-numbers="1-4"}
!pip install --upgrade yfinance
import yfinance as yf
```

## Daily equity returns from Yahoo Finance

<br>

- Yahoo provides daily data by default.
- Adjusted closing prices are adjusted for splits and also adjusted for dividends on each ex date.

<br>

. . .

```{.p}
price = yf.download('AAPL', start='2000-01-01', end='2020-12-31', progress=False)['Adj Close']
ret_daily = price.pct_change()
```

## Lower frequency returns from Yahoo

<br>

- Can get monthly or annual return as % change in monthly or annual Yahoo-adjusted closing prices 
- Equivalent to compounding Yahoo daily returns.

. . .

<br>

```{.p code-line-numbers="1-3|5-7"}
price = yf.download('AAPL', start='2000-01-01', end='2020-12-31', progress=False)['Adj Close']
ret_monthly = price.resample('M').last().pct_change()
ret_annual  = price.resample('Y').last().pct_change()

# change index from datetime to period (optional)
ret_monthly.index = ret_monthly.index.to_period('M')
ret_annual.index  = ret_annual.index.to_period('Y')
```



## Pandas-datareader package

<br>

Install and import pandas-datareader package



```{.p code-line-numbers="1-4"}
!pip install --upgrade pandas-datareader
import pandas as pd
from pandas_datareader import DataReader as pdr
```


## FRED data

<br>

- [FRED at the St. Louis Fed](https://fred.stlouisfed.org/)
- A wide range of interest rate and macroeconomic series


## Market and various portfolio returns + RF

<br>

[Ken French Data Libary](https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html)

- Ken French is a Dartmouth finance prof and board member of investment firm Dimensional
- Prolific researcher whose work we will be discussing later

. . . 

::: {.nonincremental}
Datasets include 

- benchmark returns including VW market return
- portfolios sorted on characteristics
- industry portfolios
:::

# Summarizing Returns

## Arithmetic Average Returns

- The **arithmetic average return** is sometimes used to estimate expected return: $$ \frac{1}{T}\sum_{t=1}^T r_t $$
- Assumption: each realized return was a draw from a single distribution.
  - We will talk later in the class about what to do if we think this is a bad assumption.



## Geometric Average Returns

- We may also be interested in summarizing the realized performance of an investment over a time horizon.
- The **geometric average return** is the constant return that would compound to the same compounded return experienced by an investor.
  - aka compound annual growth rate or time-weighted return. 
- The geometric average return is **always less** than the arithmetic average return.  
  - The difference is larger when returns are more volatile. 

## Tesla

- Tesla went down 50% between Nov 2021 and May 2022. 
- It then went up 50% between May 2022 and Aug 2022.
- Were Tesla shareholders back to even?

##

- For each $100 of Tesla stock, shareholders experienced 
100 → 50 

- and then 50 → 75.

- They lost 25%, even though the average return was zero.

- So, lose 50% and make 50% → lose 25%.  Suppose you 

  - make 50% and then lose 50%? 

  - lose 50% and then make 100%? 

  - make 100% and then lose 50%?

## Geometric Average Return

- Given returns $r_1, \cdots, r_n,$ 
the geometric average return is the number $r$ such that

. . .

$$(1+r)^{n}=(1+r_1)\cdots(1+r_{n})$$


- So earning $r$ each period produces the same accumulation as the actual returns $r_1, \cdots, r_n.$
We solve for $r$ as

. . .

$$r=[(1+r_1)\cdots(1+r_n)]^{1/n}-1$$




## Examples

- make 50% and lose 50% → geometric average is  

. . .

$$\sqrt{1.5 \times 0.5}-1=-0.134$$

- make 100% and lose 50% → geometric average is

. . .

$$\sqrt{2 \times 0.5}-1=0$$

. . . 

[Some historical data](http://bbcx-investments.com/risk/geometric)

<!-- ## {background-iframe="http://bbcx-investments.com/risk/geometric" background-interactive="True"} -->


## Average Returns in Python

<br>
Given a net return pandas data series `ret`, arithmetic average returns can be calculated:

``` {.p}
ret.mean()
``` 
<br>

. . . 

and the geometric averages can be calculated:
``` {.p}
from scipy.stats import gmean
gmean(1+ret)-1
``` 

## Variance and Standard Deviation

- The dispersion in realized returns can be measured by either variance or standard deviation.

. . .

Sample standard deviation for sample mean $m$:

$$ \sqrt{ \sum_{t=1}^T \frac{(r_{t}-m)^2}{T-1}}$$

. . . 

To estimate standard deviation in python from a pandas data series `ret`
``` {.p}
ret.std()
```




# Returns of Portfolios

## Portfolios

- Portfolio are combinations of underlying assets \

- Given return properties of the underlying assets, what are the return properties of their combination? \

## Expected Return of Portfolio of $N$ Assets 

$$ E[r_p] = \sum_{i=1}^{N} w_i E[r_i] $$

- $w_i$ is the portfolio weight of asset $i$ \
- $E[r_i]$ is the expected return of asset $i$ \
- The portfolio is fully invested: $\sum_i w_i = 1$ \
- Notation: $E(r_p)=\mu_i$

## Variance of Portfolio of $N$ Assets 

$$ \text{var}[r_p] = \sum_{i=1}^{N} \sum_{j=1}^{N} w_i w_j \text{cov}[r_i,r_j] $$

- $w_i$ is the portfolio weight of asset $i$ \
- $\text{cov}[r_i,r_j]$ is the covariance between assets $i$ and $j$ \
- Recall that $\text{cov}[r_i,r_j]=\text{var}[r_i]$ and $\text{sd}[r_i]=\sqrt{\text{var}[r_i]}$ \
- Notation: $\text{var}[r_p]=\sigma^2_p$; $\text{cov}[r_i,r_j]=\sigma_{i,j}$; $\text{sd}[r_p]=\sigma_p$

## Variance of Portfolio of $N$ Assets: A Matrix View

$$ \text{var}[r_p] = \sum_{i=1}^{N} \sum_{j=1}^{N} w_i w_j \text{cov}[r_i,r_j] $$

<table border="1">
  <!-- Row 1 -->
  <tr> 
    <td style="text-align:center; background-color:gray">$w_1 w_1 \text{cov}[r_1,r_1]$</td>
    <td style="text-align:center">$w_1 w_2 \text{cov}[r_1,r_2]$</td>
    <td style="text-align:center">$w_1 w_3 \text{cov}[r_1,r_3]$</td>
  </tr>
  <!-- Row 2 -->
  <tr>
    <td style="text-align:center">$w_2 w_1 \text{cov}[r_2,r_1]$</td>
    <td style="text-align:center; background-color:gray">$w_2 w_2 \text{cov}[r_2,r_2]$</td>
    <td style="text-align:center">$w_2 w_3 \text{cov}[r_2,r_3]$</td>
  </tr>
  <!-- Row 3 -->
  <tr>
    <td style="text-align:center">$w_3 w_1 \text{cov}[r_3,r_1]$</td>
    <td style="text-align:center">$w_3 w_2 \text{cov}[r_3,r_2]$</td>
    <td style="text-align:center; background-color:gray">$w_3 w_3 \text{cov}[r_3,r_3]$</td>
  </tr>
</table>

## Variance of Portfolio of $N$ Assets: A Matrix View

$$ \text{var}[r_p] = \sum_{i=1}^{N} \sum_{j=1}^{N} w_i w_j \text{cov}[r_i,r_j] $$

<table border="1">
  <!-- Row 1 -->
  <tr> 
    <td style="text-align:center; background-color:gray">$w_1^2 \text{var}[r_1]$</td>
    <td style="text-align:center">$w_1 w_2 \text{cov}[r_1,r_2]$</td>
    <td style="text-align:center">$w_1 w_3 \text{cov}[r_1,r_3]$</td>
  </tr>
  <!-- Row 2 -->
  <tr>
    <td style="text-align:center">$w_2 w_1 \text{cov}[r_2,r_1]$</td>
    <td style="text-align:center; background-color:gray">$w_2^2 \text{var}[r_2]$</td>
    <td style="text-align:center">$w_2 w_3 \text{cov}[r_2,r_3]$</td>
  </tr>
  <!-- Row 3 -->
  <tr>
    <td style="text-align:center">$w_3 w_1 \text{cov}[r_3,r_1]$</td>
    <td style="text-align:center">$w_3 w_2 \text{cov}[r_3,r_2]$</td>
    <td style="text-align:center; background-color:gray">$w_3^2 \text{var}[r_3]$</td>
  </tr>
</table>

## Variance of Portfolio of $N$ Assets: A Matrix View

$$ \text{var}[r_p] = \sum_{i=1}^{N} w_i^2 \text{var}[r_i]+ 2 \sum_{j>i} w_i w_j \text{cov}[r_i,r_j] $$

<table border="1">
  <!-- Row 1 -->
  <tr> 
    <td style="text-align:center; background-color:gray">$w_1^2 \text{var}[r_1]$</td>
    <td style="text-align:center; background-color:lightblue">$w_1 w_2 \text{cov}[r_1,r_2]$</td>
    <td style="text-align:center; background-color:lightcoral">$w_1 w_3 \text{cov}[r_1,r_3]$</td>
  </tr>
  <!-- Row 2 -->
  <tr>
    <td style="text-align:center; background-color:lightblue">$w_2 w_1 \text{cov}[r_2,r_1]$</td>
    <td style="text-align:center; background-color:gray">$w_2^2 \text{var}[r_2]$</td>
    <td style="text-align:center; background-color:#d9f2d9">$w_2 w_3 \text{cov}[r_2,r_3]$</td>
  </tr>
  <!-- Row 3 -->
  <tr>
    <td style="text-align:center; background-color:lightcoral">$w_3 w_1 \text{cov}[r_3,r_1]$</td>
    <td style="text-align:center; background-color:#d9f2d9">$w_3 w_2 \text{cov}[r_3,r_2]$</td>
    <td style="text-align:center; background-color:gray">$w_3^2 \text{var}[r_3]$</td>
  </tr>
</table>

## Example: Equal-weighted portfolio of two assets

- Expected Return 

. . .

\begin{align}
    E[r_p] =& w_1 E[r_1] + w_2 E[r_2] \\
           =& 0.5 E[r_1] + 0.5 E[r_2] \\
\end{align}


- Portfolio Variance

. . . 

\begin{align}
    \text{var}[r_p] =& w_1^2 \text{var}[r_1]+ w_2^2 \text{var}[r_2]+ 2 w_1 w_2 \text{cov}[r_1,r_2] \\ 
                    =& 0.5^2 \text{var}[r_1]+ 0.5^2 \text{var}[r_2]+ 2\cdot 0.5\cdot 0.5 \text{cov}_{12} \\
                    =& 0.25 \text{var}[r_1]+ 0.25 \text{var}[r_2]+  0.5 \text{cov}[r_1,r_2] \\
\end{align}

. . . 

- [BBCX: general weights and correlations](http://bbcx-investments.com/portfolios/two-assets)
<!-- ## {background-iframe="http://bbcx-investments.com/portfolios/two-assets" background-interactive="True"} -->


## Variance of Portfolio of $N$ Assets: Matrices {.smaller}

$$ \text{var}[r_p] = \sum_{i=1}^{N} \sum_{j=1}^{N} w_i w_j \text{cov}[r_i,r_j] = w'Vw $$

- Portfolio weights vector $$w'=[w_1\, w_2\,...\,w_N]$$

- Covariance matrix of returns:
\begin{equation*}
    V = 
    \begin{bmatrix}
        \text{var}[r_1]     & \text{cov}[r_1,r_2] & \dots  & \text{cov}[r_1,r_N] \\
        \text{cov}[r_2,r_1] & \text{var}[r_2]     & \dots  & \text{cov}[r_2,r_N] \\
        \vdots              & \vdots              & \ddots &  \vdots \\
        \text{cov}[r_N,r_1] & \text{cov}[r_N,r_2] & \dots  & \text{var}[r_N] \\
    \end{bmatrix}
\end{equation*}

## Covariance and Correlation

- Covariance: absolute degree of co-movement between two assets 
- Correlation: relative degree of co-movement between two assets

. . .

$$ \text{corr}[r_i,r_j] = \rho_{ij} = \frac{\text{cov}[r_i,r_j]}{\text{sd}[r_i]\cdot\text{sd}[r_j]} $$

- What are the possible values for $\rho$?


# For next time: Equity Markets

<br><br><br><br>

![](RiceLogo.png){fig-align="center"}